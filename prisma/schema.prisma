// Production PostgreSQL Schema - Optimized for Serverless
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String?
  userType  UserType @default(PARENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedDaycares Daycare[]
  bookings     Booking[]
  reviews      Review[]
  savedDaycares SavedDaycare[]

  // Messaging relations
  sentMessages         Message[] @relation("MessageSender")
  receivedMessages     Message[] @relation("MessageReceiver")
  parentConversations  Conversation[] @relation("ConversationParticipant")
  providerConversations Conversation[] @relation("ConversationProvider")

  // Daily reports relation
  dailyReports         DailyReport[]

  @@map("users")
}

model Daycare {
  id             String      @id @default(cuid())
  name           String
  type           DaycareType
  description    String?
  address        String
  city           String
  province       String
  postalCode     String
  phone          String?
  email          String?
  website        String?
  
  // Capacity and availability
  capacity       Int
  currentOccupancy Int       @default(0)
  ageGroups      String      // JSON string: ["Infant", "Toddler"]
  
  // Pricing and hours
  dailyRate      Float
  hourlyRate     Float?
  openTime       String
  closeTime      String
  operatingDays  String      // JSON string: ["Monday", "Tuesday"]
  
  // Features (stored as JSON string)
  features       String?     // JSON string: ["Meals Included", "Playground"]
  images         String?     // JSON string: ["url1", "url2"]
  
  // Status and verification
  verified       Boolean     @default(false)
  active         Boolean     @default(true)
  
  // Ratings
  averageRating  Float?      @default(0)
  totalReviews   Int         @default(0)
  waitlistCount  Int         @default(0)
  
  // Owner relation
  ownerId        String      
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Other relations
  bookings       Booking[]
  reviews        Review[]
  savedBy        SavedDaycare[]
  conversations  Conversation[]
  dailyReports   DailyReport[]
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("daycares")
}

model Booking {
  id         String        @id @default(cuid())
  
  // User relation
  parentId   String
  parent     User          @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId  String
  daycare    Daycare       @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  // Booking details
  childName  String
  childAge   String?
  startDate  DateTime
  endDate    DateTime?
  careType   CareType
  status     BookingStatus @default(PENDING)
  
  // Pricing
  dailyRate  Float
  totalCost  Float?
  
  // Additional info
  notes      String?
  specialNeeds String?

  // Daily reports relation
  dailyReports DailyReport[]

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  
  // User relation
  parentId   String
  parent     User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId  String
  daycare    Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  // Review content
  rating     Int      // 1-5 stars
  title      String?
  comment    String
  
  // Verification
  verified   Boolean  @default(false)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

model SavedDaycare {
  id        String   @id @default(cuid())
  
  // User relation
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([parentId, daycareId])
  @@map("saved_daycares")
}

// Enums
enum UserType {
  PARENT
  PROVIDER
  ADMIN
}

enum DaycareType {
  LICENSED_DAYCARE_CENTER
  LICENSED_HOME_DAYCARE
  UNLICENSED_HOME_DAYCARE
  NANNY_SERVICE
}

enum CareType {
  FULL_TIME
  PART_TIME
  DROP_IN
  EMERGENCY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  WAITLIST
}

// === MESSAGING MODELS ===

model Conversation {
  id          String   @id @default(cuid())

  // Participants
  parentId    String
  parent      User     @relation("ConversationParticipant", fields: [parentId], references: [id], onDelete: Cascade)

  providerId  String
  provider    User     @relation("ConversationProvider", fields: [providerId], references: [id], onDelete: Cascade)

  // Associated daycare for context
  daycareId   String?
  daycare     Daycare? @relation(fields: [daycareId], references: [id], onDelete: SetNull)

  // Conversation metadata
  lastMessageAt DateTime @default(now())
  isActive      Boolean  @default(true)

  // Messages in this conversation
  messages    Message[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([parentId, providerId, daycareId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())

  // Conversation relation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Sender and receiver
  senderId       String
  sender         User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId     String
  receiver       User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Message content
  content        String
  messageType    MessageType @default(TEXT)

  // File attachment fields
  fileName       String?
  fileUrl        String?  // Base64 data or URL
  fileType       String?  // MIME type
  fileSize       Int?     // Size in bytes

  // Message status
  isRead         Boolean  @default(false)
  readAt         DateTime?

  // Optional attachment
  attachmentUrl  String?
  attachmentType String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("messages")
}

// === DAILY REPORTS MODELS ===

model DailyReport {
  id        String   @id @default(cuid())

  // Child information
  childName String
  childAge  String

  // Booking relation
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Daycare relation
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Provider relation
  providerId String
  provider   User    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Report date
  reportDate DateTime @default(now())

  // Summary fields
  overallMood       String?  // Happy, Fussy, Sleepy, etc.
  generalNotes      String?

  // Parent notification
  notificationSent  Boolean @default(false)
  parentViewed      Boolean @default(false)
  parentViewedAt    DateTime?

  // Activities relation
  activities DailyReportActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure one report per child per day
  @@unique([bookingId, reportDate])
  @@map("daily_reports")
}

model DailyReportActivity {
  id        String   @id @default(cuid())

  // Daily report relation
  reportId  String
  report    DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  // Activity details
  activityType ActivityType
  title        String
  description  String?

  // Time tracking
  startTime    DateTime
  endTime      DateTime?
  duration     Int?     // Duration in minutes

  // Meal specific fields
  mealType     MealType?
  foodItems    String?   // JSON array of food items
  amountEaten  String?   // "All", "Most", "Some", "Little", "None"

  // Nap specific fields
  napQuality   NapQuality?

  // Photo/file attachments
  photos       String?   // JSON array of photo URLs/base64
  documents    String?   // JSON array of document URLs/base64

  // Additional notes
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("daily_report_activities")
}

// === ENUMS ===

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ActivityType {
  MEAL
  NAP
  ACTIVITY
  DIAPER_CHANGE
  MILESTONE
  INCIDENT
  PHOTO
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum NapQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
}