// Production PostgreSQL Schema - Optimized for Serverless
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String?
  userType  UserType @default(PARENT)
  role      Role     @default(USER)

  // RBAC fields
  isActive  Boolean  @default(true)
  isSuperAdmin Boolean @default(false)
  permissions String? // JSON array of custom permissions

  // Staff relationship
  daycareId String? // For staff members - which daycare they work for
  employedAt Daycare? @relation("DaycareStaff", fields: [daycareId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  ownedDaycares Daycare[] @relation("DaycareOwner")
  bookings     Booking[]
  reviews      Review[]
  savedDaycares SavedDaycare[]

  // Messaging relations
  sentMessages         Message[] @relation("MessageSender")
  receivedMessages     Message[] @relation("MessageReceiver")
  parentConversations  Conversation[] @relation("ConversationParticipant")
  providerConversations Conversation[] @relation("ConversationProvider")

  // Daily reports relation
  dailyReports         DailyReport[]

  // Enhanced waitlist relations
  waitlistEntries      WaitlistEntry[]

  // Attendance tracking
  attendanceRecords    Attendance[]

  // Admin activity logs
  activityLogs         ActivityLog[]

  // Room/Classroom assignments
  roomAssignments      RoomStaff[] @relation("RoomStaffAssignment")

  @@map("users")
}

model Daycare {
  id             String      @id @default(cuid())
  name           String
  type           DaycareType
  description    String?
  address        String
  city           String
  province       String
  postalCode     String
  phone          String?
  email          String?
  website        String?

  // Capacity and availability
  capacity       Int
  currentOccupancy Int       @default(0)
  ageGroups      String      // JSON string: ["Infant", "Toddler"]

  // Age-Rules Capacity Planning
  jurisdiction   String      @default("ON-CA") // e.g., "ON-CA", "AB-CA", "NY-US"
  isLicensed     Boolean     @default(true)

  // Pricing and hours
  dailyRate      Float
  hourlyRate     Float?
  openTime       String
  closeTime      String
  operatingDays  String      // JSON string: ["Monday", "Tuesday"]

  // Features (stored as JSON string)
  features       String?     // JSON string: ["Meals Included", "Playground"]
  images         String?     // JSON string: ["url1", "url2"]

  // Status and verification
  verified       Boolean     @default(false)
  active         Boolean     @default(true)

  // Ratings
  averageRating  Float?      @default(0)
  totalReviews   Int         @default(0)
  waitlistCount  Int         @default(0)

  // Owner relation
  ownerId        String
  owner          User        @relation("DaycareOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Staff members
  staff          User[]      @relation("DaycareStaff")
  
  // Other relations
  bookings       Booking[]
  reviews        Review[]
  savedBy        SavedDaycare[]
  conversations  Conversation[]
  dailyReports   DailyReport[]

  // Enhanced waitlist relations
  programs       Program[]
  waitlistEntries WaitlistEntry[]
  priorityRules  PriorityRule[]
  auditLogs      WaitlistAuditLog[]
  campaigns      WaitlistCampaign[]

  // Attendance tracking
  attendanceRecords Attendance[]

  // Waitlist settings
  waitlistSettings WaitlistSettings?

  // Age-Rules Capacity Planning
  children       Child[]

  // Rooms/Classrooms
  rooms          Room[]

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("daycares")
}

model Booking {
  id         String        @id @default(cuid())
  
  // User relation
  parentId   String
  parent     User          @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId  String
  daycare    Daycare       @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  // Booking details
  childName  String
  childAge   String?
  startDate  DateTime
  endDate    DateTime?
  careType   CareType
  status     BookingStatus @default(PENDING)
  
  // Pricing
  dailyRate  Float
  totalCost  Float?
  
  // Additional info
  notes      String?
  specialNeeds String?

  // Daily reports relation
  dailyReports DailyReport[]

  // Attendance records
  attendanceRecords Attendance[]

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  
  // User relation
  parentId   String
  parent     User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId  String
  daycare    Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  // Review content
  rating     Int      // 1-5 stars
  title      String?
  comment    String
  
  // Verification
  verified   Boolean  @default(false)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

model SavedDaycare {
  id        String   @id @default(cuid())
  
  // User relation
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Daycare relation
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([parentId, daycareId])
  @@map("saved_daycares")
}

// Enums
enum UserType {
  PARENT
  PROVIDER
  ADMIN
}

enum DaycareType {
  LICENSED_DAYCARE_CENTER
  LICENSED_HOME_DAYCARE
  UNLICENSED_HOME_DAYCARE
  NANNY_SERVICE
}

enum CareType {
  FULL_TIME
  PART_TIME
  DROP_IN
  EMERGENCY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED  // Child has left the daycare (displays as "Offboarded" in UI)
  WAITLIST
  WAITLIST_CONVERTED  // When waitlist entry becomes booking
}

// === MESSAGING MODELS ===

model Conversation {
  id          String   @id @default(cuid())

  // Participants
  parentId    String
  parent      User     @relation("ConversationParticipant", fields: [parentId], references: [id], onDelete: Cascade)

  providerId  String
  provider    User     @relation("ConversationProvider", fields: [providerId], references: [id], onDelete: Cascade)

  // Associated daycare for context
  daycareId   String?
  daycare     Daycare? @relation(fields: [daycareId], references: [id], onDelete: SetNull)

  // Conversation metadata
  lastMessageAt DateTime @default(now())
  isActive      Boolean  @default(true)

  // Messages in this conversation
  messages    Message[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([parentId, providerId, daycareId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())

  // Conversation relation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Sender and receiver
  senderId       String
  sender         User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId     String
  receiver       User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Message content
  content        String
  messageType    MessageType @default(TEXT)

  // File attachment fields
  fileName       String?
  fileUrl        String?  // Base64 data or URL
  fileType       String?  // MIME type
  fileSize       Int?     // Size in bytes

  // Message status
  isRead         Boolean  @default(false)
  readAt         DateTime?

  // Optional attachment
  attachmentUrl  String?
  attachmentType String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("messages")
}

// === DAILY REPORTS MODELS ===

model DailyReport {
  id        String   @id @default(cuid())

  // Child information
  childName String
  childAge  String

  // Booking relation
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Daycare relation
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Provider relation
  providerId String
  provider   User    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Report date
  reportDate DateTime @default(now())

  // Summary fields
  overallMood       String?  // Happy, Fussy, Sleepy, etc.
  generalNotes      String?

  // Parent notification
  notificationSent  Boolean @default(false)
  parentViewed      Boolean @default(false)
  parentViewedAt    DateTime?

  // Activities relation
  activities DailyReportActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure one report per child per day
  @@unique([bookingId, reportDate])
  @@map("daily_reports")
}

model DailyReportActivity {
  id        String   @id @default(cuid())

  // Daily report relation
  reportId  String
  report    DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  // Activity details
  activityType ActivityType
  title        String
  description  String?

  // Time tracking
  startTime    DateTime
  endTime      DateTime?
  duration     Int?     // Duration in minutes

  // Meal specific fields
  mealType     MealType?
  foodItems    String?   // JSON array of food items
  amountEaten  String?   // "All", "Most", "Some", "Little", "None"

  // Nap specific fields
  napQuality   NapQuality?

  // Photo/file attachments
  photos       String?   // JSON array of photo URLs/base64
  documents    String?   // JSON array of document URLs/base64

  // Additional notes
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("daily_report_activities")
}

// === ENUMS ===

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ActivityType {
  MEAL
  NAP
  ACTIVITY
  DIAPER_CHANGE
  MILESTONE
  INCIDENT
  PHOTO
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum NapQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

// === ENHANCED WAITLIST SYSTEM ===

model WaitlistEntry {
  id           String   @id @default(cuid())

  // Core relations
  parentId     String
  parent       User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  daycareId    String
  daycare      Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Child information
  childName    String
  childAge     String?
  childBirthDate DateTime?

  // Waitlist specifics
  programId    String?  // Which age group/program (Infant, Toddler, etc.)
  program      Program? @relation(fields: [programId], references: [id])

  // Desired enrollment details
  desiredStartDate    DateTime
  preferredDays       String?  // JSON: ["Monday", "Wednesday", "Friday"]
  careType           CareType

  // Priority and positioning
  priorityScore      Float    @default(0)
  position          Int      // Current position in the queue
  estimatedWaitDays Int?     // Calculated ETA

  // Status and flags
  status            WaitlistStatus @default(ACTIVE)
  isPaused          Boolean        @default(false)
  pausedUntil       DateTime?

  // Priority factors (for scoring calculation)
  hasSiblingEnrolled Boolean @default(false)
  isStaffChild      Boolean @default(false)
  inServiceArea     Boolean @default(true)
  hasSubsidyApproval Boolean @default(false)
  hasCorporatePartnership Boolean @default(false)
  hasSpecialNeeds   Boolean @default(false)
  providerTags      String? // JSON array of custom provider tags

  // Documentation and notes
  documents         String? // JSON array of uploaded document URLs
  parentNotes       String?
  providerNotes     String?

  // Offer management
  lastOfferSentAt   DateTime?
  offerExpiresAt    DateTime?
  offerResponseAt   DateTime?
  offerResponse     OfferResponse?
  offerAttempts     Int @default(0)

  // Audit and tracking
  joinedAt          DateTime @default(now())
  lastUpdatedAt     DateTime @updatedAt
  lastPositionChange DateTime?

  // Relations
  auditLogs         WaitlistAuditLog[]
  offers           WaitlistOffer[]

  @@unique([parentId, daycareId, childName]) // Prevent duplicates
  @@index([daycareId, programId, position])
  @@index([daycareId, status, priorityScore])
  @@map("waitlist_entries")
}

model Program {
  id          String @id @default(cuid())

  // Basic info
  daycareId   String
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  name        String // "Infant", "Toddler", "Preschool"
  description String?

  // Age requirements
  minAgeMonths Int
  maxAgeMonths Int

  // Capacity
  totalCapacity    Int
  currentEnrollment Int @default(0)
  waitlistCount    Int @default(0)

  // Scheduling
  operatingDays    String // JSON: ["Monday", "Tuesday"]
  operatingHours   String // JSON: {"start": "7:00", "end": "18:00"}

  // Pricing (can override daycare defaults)
  dailyRate       Float?
  hourlyRate      Float?

  // Status
  isActive        Boolean @default(true)
  acceptingWaitlist Boolean @default(true)

  // Relations
  waitlistEntries WaitlistEntry[]
  priorityRules   PriorityRule[]
  campaigns       WaitlistCampaign[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("programs")
}

model PriorityRule {
  id          String @id @default(cuid())

  // Scope
  daycareId   String?
  daycare     Daycare? @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  programId   String?
  program     Program? @relation(fields: [programId], references: [id], onDelete: Cascade)

  // Rule definition
  name        String
  description String?
  ruleType    PriorityRuleType

  // Scoring
  points      Float
  isActive    Boolean @default(true)

  // Conditions (JSON configuration)
  conditions  String? // JSON object defining when rule applies

  // Ordering
  sortOrder   Int @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("priority_rules")
}

model WaitlistOffer {
  id            String @id @default(cuid())

  // Relations
  waitlistEntryId String
  waitlistEntry   WaitlistEntry @relation(fields: [waitlistEntryId], references: [id], onDelete: Cascade)

  // Offer details
  spotAvailableDate DateTime
  offerSentAt       DateTime @default(now())
  offerExpiresAt    DateTime

  // Deposit requirements
  depositRequired   Boolean @default(false)
  depositAmount     Float?
  depositPaid       Boolean @default(false)
  depositPaidAt     DateTime?

  // Required documents
  requiredDocuments String? // JSON array of required document types

  // Response tracking
  respondedAt       DateTime?
  response          OfferResponse?
  responseNotes     String?

  // Offer context
  campaignId        String? // If part of bulk campaign
  campaign          WaitlistCampaign? @relation(fields: [campaignId], references: [id])
  isAutomated       Boolean @default(false)
  priorityAtOffer   Float   // Priority score when offer was made
  positionAtOffer   Int     // Position when offer was made

  // Seat reservation
  seatId            String? // Reference to specific seat/spot if applicable

  // Admin info
  createdBy         String? // User ID who triggered offer

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("waitlist_offers")
}

model WaitlistAuditLog {
  id              String @id @default(cuid())

  // Relations
  waitlistEntryId String?
  waitlistEntry   WaitlistEntry? @relation(fields: [waitlistEntryId], references: [id], onDelete: Cascade)
  daycareId       String
  daycare         Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Action details
  action          WaitlistAction
  description     String

  // Context
  performedBy     String? // User ID
  performedByType UserType?

  // Data changes
  oldValues       String? // JSON of previous values
  newValues       String? // JSON of new values

  // Additional context
  metadata        String? // JSON for additional context

  createdAt       DateTime @default(now())

  @@index([daycareId, createdAt])
  @@index([waitlistEntryId, createdAt])
  @@map("waitlist_audit_logs")
}

model WaitlistCampaign {
  id          String @id @default(cuid())

  // Basic info
  daycareId   String
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  programId   String?
  program     Program? @relation(fields: [programId], references: [id])

  name        String
  description String?

  // Campaign details
  spotsAvailable    Int
  spotAvailableDate DateTime

  // Offer settings
  offerWindowHours  Int @default(48) // How long offers are valid
  maxOfferAttempts  Int @default(3)  // How many people to offer before giving up

  // Status
  status      CampaignStatus @default(DRAFT)
  startedAt   DateTime?
  completedAt DateTime?

  // Results
  totalOffered     Int @default(0)
  totalAccepted    Int @default(0)
  totalDeclined    Int @default(0)
  totalExpired     Int @default(0)
  spotsRemaining   Int

  // Relations
  offers      WaitlistOffer[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String // User ID who created campaign

  @@map("waitlist_campaigns")
}

model WaitlistSettings {
  id          String @id @default(cuid())

  // Relations
  daycareId   String  @unique
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Offer window configuration
  defaultOfferWindowHours Int @default(48) // Default 48 hours
  minOfferWindowHours     Int @default(12) // Minimum 12 hours
  maxOfferWindowHours     Int @default(72) // Maximum 72 hours (3 days)

  // Deposit settings
  requireDeposit          Boolean @default(false)
  defaultDepositAmount    Float?
  depositRefundable       Boolean @default(true)

  // Auto-advance settings
  autoAdvanceEnabled      Boolean @default(true) // Automatically move to next candidate
  requireManualApproval   Boolean @default(false) // Staff must approve each offer

  // Notification preferences
  sendEmailNotifications  Boolean @default(true)
  sendSMSNotifications    Boolean @default(false)
  sendPushNotifications   Boolean @default(true)

  // Required documents
  defaultRequiredDocuments String? // JSON array ["immunization", "subsidy_approval", etc.]

  // Override settings
  allowProviderOverride   Boolean @default(true) // Provider can skip candidates
  requireOverrideReason   Boolean @default(true) // Must provide reason for override

  // Public availability
  offerToWaitlistFirst    Boolean @default(true) // Always offer to waitlist before public
  daysBeforePublic        Int @default(7) // How many days to exhaust waitlist before going public

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_settings")
}

// === ENHANCED WAITLIST ENUMS ===

enum WaitlistStatus {
  ACTIVE       // Active on waitlist
  PAUSED       // Temporarily paused
  OFFERED      // Currently has an active offer
  ACCEPTED     // Accepted offer, converting to enrollment
  DECLINED     // Declined offer, back to waitlist
  WITHDRAWN    // Left waitlist voluntarily
  EXPIRED      // Offer expired, back to waitlist
  ENROLLED     // Successfully enrolled (remove from waitlist)
  REMOVED      // Removed by provider
}

enum PriorityRuleType {
  SIBLING_ENROLLED
  STAFF_CHILD
  SERVICE_AREA
  SUBSIDY_APPROVED
  CORPORATE_PARTNERSHIP
  SPECIAL_NEEDS
  TIME_ON_LIST
  PROVIDER_CUSTOM
  FIRST_TIME_PARENT
  MILITARY_FAMILY
}

enum OfferResponse {
  ACCEPTED
  DECLINED
  EXPIRED
  PENDING
}

enum WaitlistAction {
  JOINED
  POSITION_CHANGED
  PRIORITY_UPDATED
  OFFER_SENT
  OFFER_ACCEPTED
  OFFER_DECLINED
  OFFER_EXPIRED
  PAUSED
  UNPAUSED
  WITHDRAWN
  DOCUMENTS_UPLOADED
  NOTES_UPDATED
  BULK_UPDATED
  CAMPAIGN_CREATED
  CAMPAIGN_EXECUTED
  STATUS_UPDATED
  REMOVED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

// === ATTENDANCE TRACKING MODELS ===

model Attendance {
  id          String   @id @default(cuid())

  // Child and booking info
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Daycare relation
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Child details (denormalized for quick access)
  childName   String

  // Check-in/Check-out details
  checkInTime  DateTime
  checkInBy    String   // User ID who performed check-in
  checkInUser  User     @relation(fields: [checkInBy], references: [id])
  checkInNotes String?

  checkOutTime DateTime?
  checkOutBy   String?  // User ID who performed check-out
  checkOutNotes String?

  // Calculated duration
  totalHours   Float?   // Calculated from check-in to check-out

  // Status
  status       AttendanceStatus @default(CHECKED_IN)

  // Additional tracking
  temperature  Float?   // Optional health check
  mood         String?  // Happy, Fussy, Sleepy, etc.
  emergencyContact String? // Contact info for the day

  // Late pickup tracking
  scheduledPickupTime DateTime?
  isLatePickup        Boolean @default(false)
  lateMinutes         Int?

  // Room tracking
  roomAttendance RoomAttendance?

  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([bookingId, checkInTime])
  @@index([daycareId, checkInTime])
  @@index([daycareId, status])
  @@map("attendance")
}

// === ATTENDANCE ENUMS ===

enum AttendanceStatus {
  CHECKED_IN
  CHECKED_OUT
  ABSENT
  LATE
}
// === RBAC MODELS ===

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  action      String   // e.g., "USER_CREATED", "DAYCARE_DELETED", "ROLE_CHANGED"
  entity      String   // e.g., "User", "Daycare", "Waitlist"
  entityId    String?  // ID of the affected entity
  description String?  // Human-readable description
  metadata    String?  // JSON data with additional context
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@map("activity_logs")
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// === AGE-RULES CAPACITY PLANNING MODELS ===

model Child {
  id           String    @id @default(cuid())

  // Basic info
  fullName     String
  dateOfBirth  DateTime

  // Provider relation
  daycareId    String
  daycare      Daycare   @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Flags
  isProviderChild Boolean @default(false) // Provider's own child

  // Enrollment tracking
  enrollmentStart DateTime @default(now())
  expectedExit    DateTime? // Planned departure date
  actualExit      DateTime? // Actual departure date
  isActive        Boolean  @default(true)

  // Additional info
  parentName      String?
  parentContact   String?  // Phone or email
  notes           String?

  // Medical information
  allergies       String?  // Comma-separated list of allergies
  medications     String?  // Current medications
  medicalConditions String? // Known medical conditions
  emergencyContactName  String?
  emergencyContactPhone String?
  emergencyContactRelation String?
  doctorName      String?
  doctorPhone     String?
  insuranceProvider String?
  insurancePolicyNumber String?

  // Room assignments
  roomAssignments RoomChild[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([daycareId, isActive])
  @@index([daycareId, dateOfBirth])
  @@map("children")
}

model JurisdictionRule {
  id           String  @id @default(cuid())

  // Jurisdiction identifier (e.g., "ON-CA", "AB-CA", "NY-US")
  jurisdiction String  @unique

  // Human-readable info
  name         String  // e.g., "Ontario Home Child Care"
  description  String?
  country      String  // e.g., "CA", "US"

  // Care type
  careType     String  // "LICENSED_HOME", "UNLICENSED_HOME", "CENTER"

  // Capacity rules
  maxTotal     Int     // Maximum total children
  maxUnder2    Int     // Maximum children under 2 years
  maxUnder18Months Int? // Some jurisdictions have 18-month rule

  // Age thresholds (in years)
  countUnder   Int @default(13) // Count children under this age toward total
  under2Threshold Int @default(2) // Age when child no longer counts as "under 2"

  // Provider's own children rules
  countProviderChildUnder4 Boolean @default(true) // Count provider's children under 4
  providerChildExemptAge   Int?    // Age when provider's children don't count

  // Before/after school care
  includeSchoolAge Boolean @default(true) // Include before/after school kids
  schoolAgeMin     Int?    // Minimum age for school-age category

  // Active status
  isActive     Boolean @default(true)

  // Notes and references
  regulationReference String? // Link to official regulation
  notes               String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("jurisdiction_rules")
}

// === RBAC ENUMS ===

enum Role {
  USER           // Regular parent user
  STAFF          // Daycare staff member
  PROVIDER_ADMIN // Daycare owner/admin
  SUPER_ADMIN    // Platform super admin
}

// === ROOMS/CLASSROOMS FEATURE ===

model Room {
  id          String   @id @default(cuid())

  // Basic info
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  name        String   // "Infant Room A", "Toddler 1", "Preschool Blue"
  description String?
  roomType    RoomType @default(CLASSROOM)

  // Age band configuration
  minAgeMonths Int
  maxAgeMonths Int

  // Capacity and ratios
  totalCapacity     Int
  currentOccupancy  Int @default(0)
  staffChildRatio   String // e.g., "1:3", "1:5", "1:8" - JSON for different age ranges
  minStaffRequired  Int @default(1)
  maxStaffAllowed   Int?

  // Operating schedule
  operatingDays   String // JSON: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
  openTime        String // "07:00"
  closeTime       String // "18:00"

  // Location within facility
  floorLevel      String? // "Ground Floor", "Second Floor"
  roomNumber      String?
  squareFootage   Int?

  // Features and equipment
  features        String? // JSON: ["Outdoor Access", "Washroom Attached", "Kitchen Area"]
  equipment       String? // JSON: ["Cribs", "High Chairs", "Play Equipment"]

  // Status and flags
  isActive        Boolean @default(true)
  acceptingEnrollments Boolean @default(true)

  // Licensing and compliance
  licenseNumber   String?
  lastInspection  DateTime?
  nextInspection  DateTime?
  complianceNotes String?

  // Pricing (can override daycare defaults)
  dailyRate      Float?
  hourlyRate     Float?

  // Relations
  staff          RoomStaff[]
  children       RoomChild[]
  schedules      RoomSchedule[]
  attendanceRecords RoomAttendance[]
  incidents      RoomIncident[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([daycareId, isActive])
  @@map("rooms")
}

model RoomStaff {
  id          String @id @default(cuid())

  // Relations
  roomId      String
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  staffId     String
  staff       User   @relation("RoomStaffAssignment", fields: [staffId], references: [id], onDelete: Cascade)

  // Assignment details
  role        StaffRoomRole @default(ASSISTANT)
  isPrimary   Boolean @default(false) // Primary educator for the room

  // Schedule
  assignedDays String // JSON: ["Monday", "Tuesday", "Wednesday"]
  startTime   String?
  endTime     String?

  // Status
  isActive    Boolean @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomId, staffId])
  @@index([roomId, isActive])
  @@index([staffId, isActive])
  @@map("room_staff")
}

model RoomChild {
  id          String @id @default(cuid())

  // Relations
  roomId      String
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  childId     String
  child       Child  @relation(fields: [childId], references: [id], onDelete: Cascade)

  // Assignment details
  isPrimary   Boolean @default(true) // Primary room vs occasional visit

  // Schedule
  assignedDays String // JSON: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
  startTime   String? // Typical arrival time
  endTime     String? // Typical departure time

  // Status
  isActive    Boolean @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime? // When child left this room

  // Transition tracking
  previousRoomId String?
  transitionReason String?
  transitionNotes String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomId, childId, startDate])
  @@index([roomId, isActive])
  @@index([childId])
  @@map("room_children")
}

model RoomSchedule {
  id          String @id @default(cuid())

  // Relations
  roomId      String
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Schedule details
  dayOfWeek   DayOfWeek
  startTime   String
  endTime     String

  // Activity/routine
  activityType String // "Circle Time", "Outdoor Play", "Meal Time", "Nap Time"
  description  String?

  // Staffing for this time block
  requiredStaff Int

  // Recurring or one-time
  isRecurring  Boolean @default(true)
  effectiveDate DateTime?
  expiryDate    DateTime?

  // Status
  isActive    Boolean @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roomId, dayOfWeek])
  @@map("room_schedules")
}

model RoomAttendance {
  id          String @id @default(cuid())

  // Relations
  roomId      String
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  attendanceId String
  attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  // Snapshot data for analytics
  checkInTime  DateTime
  checkOutTime DateTime?

  // Room capacity at check-in
  occupancyAtCheckIn Int
  staffCountAtCheckIn Int
  ratioAtCheckIn     String? // Calculated ratio at time of check-in

  // Room transition tracking
  transferredToRoomId String?
  transferTime        DateTime?
  transferReason      String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([attendanceId])
  @@index([roomId, checkInTime])
  @@map("room_attendance")
}

model RoomIncident {
  id          String @id @default(cuid())

  // Relations
  roomId      String
  room        Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Incident details
  incidentType IncidentType
  severity     IncidentSeverity @default(LOW)

  title        String
  description  String

  // When and who
  occurredAt   DateTime
  reportedBy   String // User ID
  reportedAt   DateTime @default(now())

  // Children involved
  childrenInvolved String? // JSON array of child IDs

  // Staff involved/witnesses
  staffInvolved String? // JSON array of staff IDs

  // Actions taken
  actionsTaken String?

  // Follow-up
  requiresFollowUp Boolean @default(false)
  followUpNotes    String?
  followUpCompletedAt DateTime?

  // Parent notification
  parentsNotified  Boolean @default(false)
  notifiedAt       DateTime?

  // Photos/documents
  attachments      String? // JSON array of URLs

  // Status
  status      IncidentStatus @default(REPORTED)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roomId, occurredAt])
  @@index([roomId, status])
  @@map("room_incidents")
}

// === ROOMS/CLASSROOMS ENUMS ===

enum RoomType {
  CLASSROOM        // Regular classroom/playroom
  INFANT_ROOM      // Specialized infant care
  TODDLER_ROOM     // Toddler-specific room
  PRESCHOOL_ROOM   // Preschool classroom
  NAP_ROOM         // Dedicated nap/rest room
  OUTDOOR_AREA     // Outdoor play space
  MULTI_PURPOSE    // Gym, cafeteria, etc.
}

enum StaffRoomRole {
  LEAD_TEACHER     // Lead/head teacher
  ASSISTANT        // Assistant teacher
  FLOATER          // Relief/floating staff
  SPECIALIST       // Special education, etc.
  VOLUNTEER        // Parent volunteers, students
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum IncidentType {
  INJURY           // Physical injury
  ILLNESS          // Child became ill
  BEHAVIORAL       // Behavioral incident
  ACCIDENT         // Accident (spill, broken item)
  SAFETY_CONCERN   // Safety hazard identified
  MEDICATION_ERROR // Medication administration error
  ALLERGIC_REACTION // Allergic reaction
  EVACUATION       // Emergency evacuation
  OTHER
}

enum IncidentSeverity {
  LOW      // Minor, no medical attention needed
  MEDIUM   // Required first aid
  HIGH     // Required medical attention
  CRITICAL // Emergency response required
}

enum IncidentStatus {
  REPORTED     // Initial report
  INVESTIGATING // Under review
  RESOLVED     // Completed
  REQUIRES_ACTION // Needs follow-up
}
